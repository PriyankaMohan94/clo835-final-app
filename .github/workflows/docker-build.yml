name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_WEBAPP_REPO: ${{ secrets.ECR_WEBAPP_REPO }}
  ECR_MYSQL_REPO:  ${{ secrets.ECR_MYSQL_REPO }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (supports session token)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push webapp image
        run: |
          REGISTRY_HOST=$(echo "${ECR_WEBAPP_REPO}" | cut -d'/' -f1)
          SHA="$(git rev-parse --short HEAD)"

          docker build -t webapp:latest .
          docker tag webapp:latest "${ECR_WEBAPP_REPO}:latest"
          docker tag webapp:latest "${ECR_WEBAPP_REPO}:${SHA}"

          docker push "${ECR_WEBAPP_REPO}:latest"
          docker push "${ECR_WEBAPP_REPO}:${SHA}"
          echo "Pushed ${ECR_WEBAPP_REPO}:{latest,${SHA}}"

      - name: Build & push mysql image
        if: env.ECR_MYSQL_REPO != ''
        run: |
          REGISTRY_HOST=$(echo "${ECR_MYSQL_REPO}" | cut -d'/' -f1)
          SHA="$(git rev-parse --short HEAD)"

          docker build -f Dockerfile_mysql -t mysqlimg:latest .
          docker tag mysqlimg:latest "${ECR_MYSQL_REPO}:latest"
          docker tag mysqlimg:latest "${ECR_MYSQL_REPO}:${SHA}"

          docker push "${ECR_MYSQL_REPO}:latest"
          docker push "${ECR_MYSQL_REPO}:${SHA}"
          echo "Pushed ${ECR_MYSQL_REPO}:{latest,${SHA}}"
